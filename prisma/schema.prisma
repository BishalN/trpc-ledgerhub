// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    ledgers      Ledger[]
    pereferences UserPreferences?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserPreferences {
  id       String  @id @default(cuid())
  language String? @default("en")
  currency String? @default("USD")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Customer {
  id          String @id @default(cuid())
  name        String
  // { "email": "email@example", "phone": "1234567890", "address": "some address"}
  contact     Json?
  description String?
  avatar      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
  ledger       Ledger?       @relation(fields: [ledgerId], references: [id])
  ledgerId     String?
}

model Supplier {
  id          String @id @default(cuid())
  name        String
  contact     Json?
  description String?
  avatar      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
  products     Product[] @relation("ProductSuppliers")
  ledger       Ledger?       @relation(fields: [ledgerId], references: [id])
  ledgerId     String?
}

model Ledger {
  id      String @id @default(cuid())
  name    String
  ownerId String

  owner         User          @relation(fields: [ownerId], references: [id])
  transactions Transaction[]
  customers    Customer[]
  suppliers    Supplier[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id String @id @default(cuid())

  amount        Float
  type          TransactionType // receivable, payable, received, paid
  ledgerId      String
  remarks       String? // A short description of the transaction
  // A transaction can be associated with either a customer or a supplier
  // Sometimes a transaction is not associated with either when there is no customer or supplier
  customerId    String?
  supplierId    String?

  createdAt DateTime @default(now())

  // having a json field that has the products and their quantities
  // { "products": [{ "id": "1", "quantity": 2 }, { "id": "2", "quantity": 3 }] }
  // TODO: validate with zod
  products    Json[] // optional


  ledger   Ledger    @relation(fields: [ledgerId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
  supplier Supplier? @relation(fields: [supplierId], references: [id])
}

model Product {
  id          String  @id @default(cuid())
  name        String
  barcode     String?
  description String?
  costPrice   Float
  sellingPrice Float
  thumbnail   String?
  stock       Int     @default(0)

  
  suppliers Supplier[] @relation("ProductSuppliers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionType {
  RECEIVABLE
  PAYABLE
  RECEIVED
  PAID
}